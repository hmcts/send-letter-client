plugins {
    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'org.springframework.boot' version '2.0.6.RELEASE'
    id 'org.owasp.dependencycheck' version '4.0.0'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.20.0'
}

group 'uk.gov.hmcts.reform'
version '2.1.2'

checkstyle {
    maxWarnings = 0
    toolVersion = '8.14'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
}

sourceCompatibility = 1.8

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

repositories {
    jcenter()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
    mavenLocal()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/send-letter-client"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'send-letter-client'
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'client for send-letter producer')
                root.appendNode('name', 'Send letter client')
                root.appendNode('url', 'https://github.com/hmcts/send-letter-client')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Main']
    publish = true
    pkg {
        repo = 'hmcts-maven'
        name = 'send-letter-client'
        userOrg = 'hmcts'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/hmcts/send-letter-client'
        version {
            name = project.version
        }
    }
}

ext {
    junitVersion = '5.3.1'
    githubFeignVersion = '9.5.1'
}

dependencyManagement {
    dependencies {
        // align with selected version
        dependencySet(group: 'io.github.openfeign', version: githubFeignVersion) {
            entry 'feign-hystrix'
            entry 'feign-java8'
            entry 'feign-slf4j'
        }
        // version jump from 3.3.0
        dependencySet(group: 'io.github.openfeign.form', version: '3.4.1') {
            entry 'feign-form-spring'
        }
        dependencySet(group: 'com.google.guava', version: '27.0.1-jre') {
            entry 'guava'
        }
        // version jump from 0.6.6
        dependencySet(group: 'com.netflix.archaius', version: '0.7.6') {
            entry 'archaius-core'
        }
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.0.2.RELEASE'

    compile group: 'io.github.openfeign', name: 'feign-jackson', version: githubFeignVersion

    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
    testCompile group: 'org.mockito', name: 'junit-jupiter', version: '2.20.0'

    integrationTestCompile sourceSets.main.runtimeClasspath
    integrationTestCompile sourceSets.test.runtimeClasspath
    integrationTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    failFast = true
}

integration {
    useJUnitPlatform()
    failFast = true
}

bootJar {
    enabled = false
}

jar {
   enabled = true
}
