plugins {
    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'org.owasp.dependencycheck' version '5.2.2'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

group 'uk.gov.hmcts.reform'
version '2.5.0'

checkstyle {
    maxWarnings = 0
    toolVersion = '8.21'
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            def isNonStable = { String version ->
                ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
                }
            }

            if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
}

sourceCompatibility = 1.8

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

repositories {
    jcenter()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
    mavenLocal()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/send-letter-client"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'send-letter-client'
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'client for send-letter producer')
                root.appendNode('name', 'Send letter client')
                root.appendNode('url', 'https://github.com/hmcts/send-letter-client')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Main']
    publish = true
    pkg {
        repo = 'hmcts-maven'
        name = 'send-letter-client'
        userOrg = 'hmcts'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/hmcts/send-letter-client'
        version {
            name = project.version
        }
    }
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'com.google.guava', version: '28.1-jre') {
            entry 'guava'
        }
        // CVE-2019-10086 until 1.9.3
        dependencySet(group: 'commons-beanutils', version: '1.9.4') {
            entry 'commons-beanutils'
        }
        dependencySet(group: 'io.github.openfeign', version: '10.5.1') {
            entry 'feign-hystrix'
            entry 'feign-slf4j'
        }
    }
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.1.3.RELEASE'

    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '10.5.1'

    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.2'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    testImplementation group: 'org.mockito', name: 'junit-jupiter', version: '2.20.0'

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    failFast = true

    testLogging {
        exceptionFormat = 'full'
    }
}

bootJar {
    enabled = false
}

jar {
   enabled = true
}
