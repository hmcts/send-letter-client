plugins {
    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.4.5'
    id 'org.owasp.dependencycheck' version '12.1.3'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.52.0'
}

def buildNumber = System.getenv("RELEASE_VERSION")?: "DEV-SNAPSHOT"

group 'com.github.hmcts'
version buildNumber

checkstyle {
    maxWarnings = 0
    toolVersion = '10.19.0'
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            def isNonStable = { String version ->
                ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
                }
            }

            if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

tasks.register('integration', Test) {
    description = 'Runs the integration tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {
    executionData(test, integration)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'uk/gov/hmcts/reform/sendletter/api/model/v3/**',
                    'uk/gov/hmcts/reform/sendletter/api/SendLetterResponse**',
                    'uk/gov/hmcts/reform/sendletter/api/LetterWithPdfsRequest**',
            ])
        }))}
    reports {
        xml.getRequired().set(true)
        csv.getRequired().set(false)
        xml.outputLocation.set(
                file("${project.getLayout().getBuildDirectory()}/reports/jacoco/test/jacocoTestReport.xml"))
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/send-letter-client"
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'send-letter-client'
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'client for send-letter producer')
                root.appendNode('name', 'Send letter client')
                root.appendNode('url', 'https://github.com/hmcts/send-letter-client')
                root.children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            name = "AzureArtifacts"
            url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
            credentials {
                username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
                password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
            }
        }
    }
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'com.google.guava', version: '33.3.1-jre') {
            entry 'guava'
        }
    }
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '3.4.5'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.2.1'
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.6'
    implementation group: 'commons-io', name: 'commons-io', version: '2.19.0'
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '2.0.11'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: '3.0.1'

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    failFast = true

    testLogging {
        exceptionFormat = 'full'
    }
}

bootJar {
    archiveClassifier = 'boot'
    enabled = false
}

jar {
    archiveClassifier = ''
    enabled = true
}
